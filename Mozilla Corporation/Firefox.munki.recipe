<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<key>Description</key>
		<string>Downloads the latest version of Firefox and imports it into Munki. Use as a Managed Install as it automatically works as a Managed Update</string>
		<key>Identifier</key>
		<string>com.github.Lotusshaney.munki.Firefox</string>
		<key>Input</key>
		<dict>
			<key>RELEASE</key>
			<string>latest</string>
			<key>MUNKI_REPO_SUBDIR</key>
			<string>apps/%NAME%</string>
			<key>NAME</key>
			<string>Firefox</string>
			<key>pkginfo</key>
			<dict>
				<key>catalogs</key>
				<array>
					<string>testing</string>
				</array>
				<key>description</key>
				<string>Fast, safe Web browser.</string>
				<key>developer</key>
				<string>Mozilla Corporation</string>
				<key>display_name</key>
				<string>Firefox</string>
				<key>name</key>
				<string>%NAME%</string>
				<key>unattended_install</key>
				<true/>
			</dict>
		</dict>
		<key>MinimumVersion</key>
		<string>2.3</string>
		<key>ParentRecipe</key>
		<string>com.github.autopkg.pkg.Firefox_EN</string>
		<key>Process</key>
		<array>
			<dict>
				<key>Arguments</key>
				<dict>
					<key>additional_pkginfo</key>
					<dict>
						<key>installs</key>
						<array>
							<dict>
								<key>path</key>
								<string>/Applications/Firefox.app</string>
								<key>type</key>
								<string>application</string>
								<key>CFBundleShortVersionString</key>
								<string>%version%</string>
							</dict>
						</array>
						<key>installcheck_script</key>
						<string><![CDATA[#!/bin/zsh

#shellcheck shell=bash

#Firefox build type installed

#Functions
#This function gets around issues that arises because string comparison in Shell compares character by character lexicographically.
#We can convert each version component into integers and compare them numerically.
compareVersions() {
    local ver1 ver2
    ver1=("${(s:.:)1}")
    ver2=("${(s:.:)2}")

    for i in {1..3}; do
        if (( ver1[i] > ver2[i] )); then
            return 0
        elif (( ver1[i] < ver2[i] )); then
            return 1
        fi
    done
    echo "Both versions are equal"
    return 1
}


FIREFOX_LOCATION="/Applications/Firefox.app" PKG_VERSION="%version%"

if [[ -d "${FIREFOX_LOCATION}" ]]; then
	if [[ -f "${FIREFOX_LOCATION}"/Contents/Resources/application.ini ]]; then
		if /usr/bin/grep -q -- "RemotingName=firefox-esr" "${FIREFOX_LOCATION}"/Contents/Resources/application.ini; then
			echo "FireFox ESR Detected, Skipping..."
			exit 1
		else
			echo "FireFox Detected..." INSTALLED_VERSION="$( /usr/bin/defaults read ${FIREFOX_LOCATION}/Contents/Info.plist CFBundleShortVersionString )"
			if compareVersions "${PKG_VERSION}" "${INSTALLED_VERSION}" ; then
				echo "${PKG_VERSION} > ${INSTALLED_VERSION}, Installing..."
				exit 0
			else
				echo "${PKG_VERSION} !> ${INSTALLED_VERSION}, Skipping..."
				exit 1
			fi
		fi
	fi
else
	echo "FireFox Not Detected, Skipping..."
	exit 1
fi

exit 0]]></string>
					</dict>
				</dict>
				<key>Processor</key>
				<string>MunkiPkginfoMerger</string>
			</dict>
			<dict>
				<key>Arguments</key>
				<dict>
					<key>pkg_path</key>
					<string>%RECIPE_CACHE_DIR%/%NAME%-%version%.pkg</string>
					<key>repo_subdirectory</key>
					<string>%MUNKI_REPO_SUBDIR%</string>
				</dict>
				<key>Processor</key>
				<string>MunkiImporter</string>
			</dict>
		</array>
	</dict>
</plist>
