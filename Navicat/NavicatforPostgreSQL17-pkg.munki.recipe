<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
    <dict>
        <key>Description</key>
        <string>Downloads the latest version of Navicat for PostgreSQL 17 and imports it into a
            munki_repo as a PKG.</string>
        <key>Identifier</key>
        <string>com.github.Lotusshaney.munki.NavicatPostgreSQL17-pkg</string>
        <key>Input</key>
        <dict>
            <key>MUNKI_CATEGORY</key>
            <string>Developer Tools</string>
            <key>MUNKI_REPO_SUBDIR</key>
            <string>apps/navicat</string>
            <key>NAME</key>
            <string>Navicat for PostgreSQL</string>
            <key>pkginfo</key>
            <dict>
                <key>catalogs</key>
                <array>
                    <string>testing</string>
                </array>
                <key>category</key>
                <string>%MUNKI_CATEGORY%</string>
                <key>developer</key>
                <string>PremiumSoft</string>
                <key>description</key>
                <string>Navicat for PostgreSQL is an easy-to-use graphical tool for PostgreSQL
                    database development. From writing simple SQL queries to developing complex
                    databases, Navicat for PostgreSQL is designed to accommodate a wide range of
                    users, from PostgreSQL beginners to seasoned developers. Connect to local/remote
                    PostgreSQL servers and compatible with cloud databases like Amazon Redshift,
                    Amazon Aurora, Amazon RDS, Google Cloud and Microsoft Azure, and all PostgreSQL
                    database objects.</string>
                <key>display_name</key>
                <string>Navicat for PostgreSQL</string>
                <key>name</key>
                <string>%NAME%</string>
                <key>unattended_install</key>
                <true />
            </dict>
        </dict>
        <key>MinimumVersion</key>
        <string>0.3.1</string>
        <key>ParentRecipe</key>
        <string>com.github.Lotusshaney.pkg.NavicatPostgreSQL17</string>
        <key>Process</key>
        <array>
            <dict>
                <key>Arguments</key>
                <dict>
                    <key>additional_pkginfo</key>
                    <dict>
                        <key>installs</key>
                        <array>
                            <dict>
                                <key>path</key>
                                <string>/Applications/Navicat for PostgreSQL.app</string>
                                <key>type</key>
                                <string>application</string>
                                <key>CFBundleShortVersionString</key>
                                <string>%version%</string>
                            </dict>
                        </array>
                        <key>installcheck_script</key>
                        <string><![CDATA[#!/bin/bash

# Check if and application is installed and if the Major version matches a target version

# exit codes
# 0: Major Version is equal to target version
# 1: Major Version is !equal to target version
# 99: Application not found

# Path to Application
APP_NAME="Navicat for PostgreSQL"
APP_PATH="/Applications/${APP_NAME}.app"
INFO_PLIST="${APP_PATH}/Contents/Info.plist"
VERSION_TARGET="17"

# Check if the app exists
if [[ ! -d "${APP_PATH}" ]]; then
    echo "${APP_NAME}.app not found in /Applications."
    exit 99
fi

# Get version from Info.plist
VERSION=$(/usr/bin/defaults read "${INFO_PLIST}" CFBundleShortVersionString 2>/dev/null)

# Check if the version was retrieved successfully
if [[ -z "${VERSION}" ]]; then
    echo "Failed to retrieve ${APP_NAME} version."
    exit 1
fi

echo "${APP_NAME}: ${VERSION}"

# Extract major version number
MAJOR_VERSION=$(echo "${VERSION}" | /usr/bin/cut -d '.' -f 1)

# Check if VERSION_TARGET matches MAJOR_VERSION
if [[ "${MAJOR_VERSION}" -eq "${VERSION_TARGET}" ]]; then
    echo "${APP_NAME} version is ${VERSION} (=${VERSION_TARGET}). All Clear to update..."
    exit 0
else
    echo "${APP_NAME} version is ${VERSION} (!= ${VERSION_TARGET}). Aborting update..."
    exit 1
fi]]></string>
                    </dict>
                </dict>
                <key>Processor</key>
                <string>MunkiPkginfoMerger</string>
            </dict>
            <dict>
                <key>Arguments</key>
                <dict>
                    <key>pkg_path</key>
                    <string>%RECIPE_CACHE_DIR%/%NAME%-%version%.pkg</string>
                    <key>repo_subdirectory</key>
                    <string>%MUNKI_REPO_SUBDIR%</string>
                </dict>
                <key>Processor</key>
                <string>MunkiImporter</string>
            </dict>
        </array>
    </dict>
</plist>