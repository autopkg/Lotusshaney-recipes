#!/bin/bash

# Dirty script built in the Zoom installer
# Barely updated by @ygini to act as a munki postinstall script
# Also updated by @bp88 and @homebysix for Catalina compatibility
# All UI related things have been removed
# But all other things are kept, even code that will never run.

# Bail out early if the target disk is not the startup disk.
if [ "$3" != "/" ]; then
    echo "[ERROR] Target disk is not the startup disk."
    exit 1
fi

app_path="/Applications/zoom.us.app"

kext_file="/System/Library/Extensions/ZoomAudioDevice.kext"
src_kext_file="$app_path/Contents/Plugins/ZoomAudioDevice.kext"
src_sig_kext_file="$app_path/Contents/Plugins/OS109/ZoomAudioDevice.kext"
LOG_PATH="/Library/Logs/zoomusinstall.log"
app_path="/Applications/zoom.us.app"

ver="$(/usr/bin/sw_vers -productVersion)"
majorver="$(/usr/bin/sw_vers -productVersion | /usr/bin/cut -d "." -f 1)"
minorver="$(/usr/bin/sw_vers -productVersion | /usr/bin/cut -d "." -f 2)"

echo "get version: $ver, $majorver, $minorver" >> "$LOG_PATH"

login_user="$(/usr/bin/stat -f '%Su' /dev/console)"
echo "user: $login_user" >> "$LOG_PATH"

need_unload=0
need_update=0
need_load=0
need_update_sig=0
use_sig_file=0

# autoupdate daemon variables
LOG_PATH=/Library/Logs/zoomusinstall.log
ZOOM_PATH="$2"/zoom.us.app

SrcDaemonHelperPath="$app_path"/Contents/Library/LaunchServices/us.zoom.ZoomDaemon
DestToolDirectory="/Library/PrivilegedHelperTools/"
DestDaemonHelperPath="$DestToolDirectory"us.zoom.ZoomDaemon
TmpDaemonHelperPath="$DestDaemonHelperPath".tmp

DestPlistDirectory="/Library/LaunchDaemons/"
DestDaemonHelperPlistPath="$DestPlistDirectory"us.zoom.ZoomDaemon.plist

DaemonIdentifier=us.zoom.ZoomDaemon

#################################
# use audio device plugin
AudioPluginPath="/Library/Audio/Plug-Ins/HAL"
audioPluginfile="$app_path/Contents/Plugins/ZoomAudioDevice.driver"
if [[ "$majorver" -eq 10 && "$minorver" -gt 9 ]] || [[ "$majorver" -gt 10 ]]; then
    echo "Install audio device drive" >> "$LOG_PATH"

    #install audio driver
    if [ -d "$AudioPluginPath/ZoomAudioDevice.driver" ]; then
        /bin/rm -rf "$AudioPluginPath/ZoomAudioDevice.driver"
    fi

    # make intermediate directories
    /bin/mkdir -p "$AudioPluginPath"

    # copy audio plugin
    /bin/cp -rf "$audioPluginfile" "$AudioPluginPath"
#################################
# use audio device kernel
else
    if [[ "$majorver" -eq 10 && "$minorver" -gt 9 ]] || [[ "$majorver" -gt 10 ]]; then
        vsig="$(/usr/bin/codesign -dv $kext_file 2>&1)"
        ret="$?"
        echo "verify signature:$vsig, $ret" >> "$LOG_PATH"
        if [ $ret -ne 0 ]; then
            echo "set update set to 1" >> "$LOG_PATH"
            need_update_sig=1
        fi

        use_sig_file=1
    fi

    if [ -d "$kext_file" ]; then
        v="$(/usr/libexec/PlistBuddy -c 'Print CFBundleVersion' "$kext_file/Contents/Info.plist")"
        echo "current version is $v" >> "$LOG_PATH"

        if [ $use_sig_file = 1 ]; then
            sv="$(/usr/libexec/PlistBuddy -c 'Print CFBundleVersion' "$src_sig_kext_file/Contents/Info.plist")"
        else
            sv="$(/usr/libexec/PlistBuddy -c 'Print CFBundleVersion' "$src_kext_file/Contents/Info.plist")"
        fi

        echo "new version is $sv" >> "$LOG_PATH"

        if [ "$v" = "$sv" ] && [ $need_update_sig = 0 ]; then
            echo "same version, no update" >> "$LOG_PATH"
        else
            need_update=1
        fi

        st="$(/usr/sbin/kextstat -b zoom.us.ZoomAudioDevice | /usr/bin/grep zoom.us.ZoomAudioDevice 2>&1)"
        if echo "$st" | grep -q "zoom.us.ZoomAudioDevice"; then
            echo "audio device is loaded: ($st)" >> "$LOG_PATH"
            if [ $need_update = 1 ]; then
                need_unload=1
            fi
        else
            echo "audio device is not loaded" >> "$LOG_PATH"
            need_load=1
        fi
    else
        need_update=1
    fi

    echo "install flag: $need_update, $need_load, $need_unload, $need_update_sig, $use_sig_file" >> "$LOG_PATH"
    echo "var $app_path" >>"$LOG_PATH"

    if [ $need_update = 0 ]; then
        echo "don't update" >> "$LOG_PATH"

        if [ $need_load = 1 ]; then
            l="$(/sbin/kextload -v 3 "$kext_file" 2>&1)"
            r="$?"
            echo "load ext: $l, $r" >> "$LOG_PATH"

            if [ $r -ne 0 ]; then
                kutil="$(/usr/bin/kextutil -v 4 "$kext_file" 2>&1)"
                echo "use kextutil: $kutil" >> "$LOG_PATH"
            fi

            state="$(/usr/sbin/kextstat -b zoom.us.ZoomAudioDevice 2>&1)"
            echo "ext stat: $state" >> "$LOG_PATH"
        fi
    else
        r=0
        if [ $need_unload = 1 ]; then
            s="$(sudo /sbin/kextunload -v 3 "$kext_file" 2>&1)"
            r="$?"

            echo "unload ext: ($s), ret=$r" >> "$LOG_PATH"
        fi

        unloaded=0
        if [ $r = 0 ]; then
            echo "unload ok" >> "$LOG_PATH"
            unloaded=1
        else
            echo "fail to unload kext" >> "$LOG_PATH"
            #try it again
            s="$(/usr/bin/sudo /sbin/kextunload -v 3 "$kext_file" 2>&1)"
            r="$?"

            echo "unload ext again: ($s), ret=$r" >> "$LOG_PATH"
            unloaded=1
        fi

        if [ $unloaded = 1 ]; then
            /bin/rm -rf "$kext_file"

            if [ $use_sig_file = 0 ]; then
                c="$(/bin/cp -af "$src_kext_file" "$kext_file" 2>&1)"
                r="$?"
            else
                c="$(/bin/cp -af "$src_sig_kext_file" "$kext_file" 2>&1)"
                r="$?"
            fi

            echo "copy kext:$c, $r" >> "$LOG_PATH"

            p="$(/usr/bin/printenv PATH)"
            echo "path: $p" >> "$LOG_PATH"
            echo "kext_file: $kext_file" >> "$LOG_PATH"
            #chown -R root:wheel "$kext_file"
            /bin/chmod -R 755 "$kext_file"
            /usr/bin/find "$kext_file" -type f -exec /bin/chmod 0644 {} ";"
        fi

        load="$(/sbin/kextload -v 3 "$kext_file" 2>&1)"
        r="$?"
        echo "load ext: $load, $r" >> "$LOG_PATH"

        if [ $r -ne 0 ]; then
            ku="$(/usr/bin/sudo /usr/bin/kextutil -b zoom.us.ZoomAudioDevice -v 2>&1)"
            echo "try kextutil: $ku" >> "$LOG_PATH"
        fi
    fi

    st="$(/usr/sbin/kextstat -b zoom.us.ZoomAudioDevice)"
    echo "ext stat: $st" >> "$LOG_PATH"
    echo "parent id: $PPID, $$" >> "$LOG_PATH"
fi

###########################
#verify codesign
function verify_codesign()
{
    echo "verify codesign########################### start">>$LOG_PATH
    filePath="$1"
    echo "verify codesign filePath=$filePath">>$LOG_PATH
    codesign -v --verbose=4  -R="anchor apple generic and certificate leaf[subject.OU] = BJ4HAAB9B3 and certificate leaf[subject.CN] = \"Developer ID Application: Zoom Video Communications, Inc. (BJ4HAAB9B3)\" " "$filePath">>$LOG_PATH
    verifyRes=$?
    echo "verifyRes = $verifyRes" >> $LOG_PATH
    echo "verify codesign########################### end">>$LOG_PATH
    return $verifyRes
}

#################################
# install autoupdate daemon

function installDaemon()
{
    echo "----------- installDaemon start ------------" >> $LOG_PATH
    #copy helper tool
    if [[ -f "$SrcDaemonHelperPath" ]]; then

        if [[ -d "$DestToolDirectory" ]]; then
            echo "$DestToolDirectory exist"  >> $LOG_PATH
        else
            echo "create $DestToolDirectory" >> $LOG_PATH
            mkdir -p "$DestToolDirectory"
        fi

        if [[ -f  "$TmpDaemonHelperPath" ]]; then
            rm "$TmpDaemonHelperPath"
        fi

        cp -f "$SrcDaemonHelperPath" "$TmpDaemonHelperPath"
        chmod 544 "$TmpDaemonHelperPath"

        verify_codesign "$TmpDaemonHelperPath"
        verifyHelperToolResult=$?
        if [[ $verifyHelperToolResult != 0 ]]; then
            echo "verify daemon helper codesign failed" >> $LOG_PATH
            rm "$TmpDaemonHelperPath"
            exit 1
        fi

        if [[ -f "$DestDaemonHelperPath" ]]; then
            rm "$DestDaemonHelperPath"
        fi

        mv "$TmpDaemonHelperPath" "$DestDaemonHelperPath"
        echo "copy new daemon helper success!" >> $LOG_PATH
    else
        echo "daemon helper not exit, daemon helper path: $SrcDaemonHelperPath" >> $LOG_PATH
        exit 1
    fi

    #create launchd plist
    echo $'<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>us.zoom.ZoomDaemon</string>
    <key>MachServices</key>
    <dict>
        <key>us.zoom.ZoomDaemon</key>
        <true/>
    </dict>
    <key>Program</key>
    <string>/Library/PrivilegedHelperTools/us.zoom.ZoomDaemon</string>
    <key>ProgramArguments</key>
    <array>
        <string>/Library/PrivilegedHelperTools/us.zoom.ZoomDaemon</string>
    </array>
</dict>
</plist>' > us.zoom.ZoomDaemon.plist

    #copy launchd plist
    if [[ -f us.zoom.ZoomDaemon.plist ]]; then

        if [[ -d "$DestPlistDirectory" ]]; then
            echo "$DestPlistDirectory exist"  >> $LOG_PATH
        else
            echo "create $DestPlistDirectory" >> $LOG_PATH
            mkdir -p "$DestPlistDirectory"
        fi

        copyplist=$(cp -f us.zoom.ZoomDaemon.plist "$DestDaemonHelperPlistPath")
        ret=$?
        if [ $ret -eq 0 ] ; then
            chmod 644 "$DestDaemonHelperPlistPath"
            sudo launchctl load "$DestDaemonHelperPlistPath"
            launchinfo=$(sudo launchctl list $DaemonIdentifier 2>&1)
        else
            echo "copyPlist failed" >> $LOG_PATH
            exit 1
        fi
        echo "check plist status: $copyplist, $ret, $launchinfo" >> $LOG_PATH

    else
        echo "daemon helper plist not exit" >> $LOG_PATH
        exit 1
    fi


    echo "----------- installDaemon end ------------" >> $LOG_PATH
}

echo "======starts postinstall.sh[$(date)]==========" >> $LOG_PATH
argv=()
argv[0]="$1"
argv[1]="$ZOOM_PATH"
echo "ZOOM_PATH = $ZOOM_PATH  , params2=$2" >> $LOG_PATH
config_app "${argv[@]}"

installDaemon


#################################
#audio device end

function removePluginsInUserFolder
{
   # Loop through all users with UIDs over 500
    for name in $(/usr/bin/dscl /Local/Default list /Users UniqueID | /usr/bin/awk '$2 > 500 {print $1}'); do
        # Determine home directory of user
        userHome="$(/usr/bin/dscl /Local/Default read /Users/"$name" NFSHomeDirectory | /usr/bin/awk '{print $2}')"

        if [[ -d "$userHome/Library/Application Support/zoom.us/Plugins" ]] ; then
            /bin/rm -rf "$userHome/Library/Application Support/zoom.us/Plugins"
        fi
    done
}
removePluginsInUserFolder

exit 0
